//// Load KBA boundaries as a feature collection
var regions = ee.FeatureCollection('ft:1pJO34hLdzSZtsOvDrFRZSSZhmmhvkczpABU5d-p1');

//// Add column for area in square kilometers
var regions_with_area = regions.map(function(feature) {
  return feature.set({areakm2: feature.geometry().area().divide(1000 * 1000)});
});

print(regions_with_area);

//// Load FIRMS dataset as an image collection.  Select only the brightness temperature band
var FIRMS = ee.ImageCollection('FIRMS').select(['T21']);

//// Classify each daily image as binary fire(1) or no fire(masked)
var FIRMS_fire = FIRMS.map(function(image) {
  return image.gte(ee.Image.constant(300)).set('year', image.get('year'));
  });

//// create list of years over which to iterate
var years = ee.List.sequence(2001, 2017);

//// Iterate through years and create rasters of total number of fires per year
var images_by_year = years.map(function(year) {
    var filtered = FIRMS.filter(ee.Filter.calendarRange(year, year, 'year'));
    return filtered.sum().set('year', year);
  });

//// Make the result an Image Collection
var summed_fires = ee.ImageCollection(images_by_year);

//// Print results and add them to the map 
print(summed_fires);
Map.addLayer(summed_fires);

//// Calculate total value per KBA boundary per image in the annual image collection
var results = summed_fires.map(function(image) {
  return image.reduceRegions({
    collection: regions_with_area,
    reducer: ee.Reducer.sum(),
    scale: 1000
  }).map(function(f) {
    // Add a year property to each output feature
    return f.set('year', image.get('year'));
  });
});

//// Flatten the results
var kba_FIRMS = ee.FeatureCollection(results).flatten();


////Export the output feature collection to Google Drive as a csv file
Export.table.toDrive(kba_FIRMS);


////Add the output feature collection to the map
Map.addLayer(kba_FIRMS);
